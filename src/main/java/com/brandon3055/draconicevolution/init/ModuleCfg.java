package com.brandon3055.draconicevolution.init;

import codechicken.lib.config.ConfigTag;
import codechicken.lib.config.StandardConfigFile;
import com.brandon3055.brandonscore.api.TechLevel;
import com.brandon3055.brandonscore.utils.DataUtils;
import com.brandon3055.draconicevolution.api.modules.Module;
import com.brandon3055.draconicevolution.api.modules.lib.BaseModule;
import com.brandon3055.draconicevolution.utils.LogHelper;
import com.google.common.collect.Lists;
import net.minecraft.util.ResourceLocation;

import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class ModuleCfg {
    private static ConfigTag moduleStats;

    //@formatter:off
    //Default Values
    private static Integer[] WYVERN_TOOLS            = new Integer[] {4, 4};
    private static Integer[] DRACONIC_TOOLS          = new Integer[] {6, 5};
    private static Integer[] CHAOTIC_TOOLS           = new Integer[] {8, 6};

    private static Integer[] DRACONIC_STAFF          = new Integer[] {8, 6};
    private static Integer[] CHAOTIC_STAFF           = new Integer[] {10, 8};

    private static Integer[] WYVERN_CHESTPIECE       = new Integer[] {6, 5};  // 6 * 5 = 30
    private static Integer[] DRACONIC_CHESTPIECE     = new Integer[] {8, 6};  // 8 * 6 = 48
    private static Integer[] CHAOTIC_CHESTPIECE      = new Integer[] {10, 8}; // 10 * 8 = 80

    private static Integer[] WYVERN_CAPACITOR        = new Integer[] {3, 3};
    private static Integer[] DRACONIC_CAPACITOR      = new Integer[] {5, 5};
    private static Integer[] CHAOTIC_CAPACITOR       = new Integer[] {8, 6};


    public static int[] wyvernTools;
    public static int[] draconicTools;
    public static int[] chaoticTools;

    public static int[] draconicStaff;
    public static int[] chaoticStaff;

    public static int[] wyvernChestpiece;
    public static int[] draconicChestpiece;
    public static int[] chaoticChestpiece;

    public static int[] wyvernCapacitor;
    public static int[] draconicCapacitor;
    public static int[] chaoticCapacitor;

    public static boolean removeInvalidModules = false;

    //@formatter:on

    public static void loadConfig(ConfigTag configTag) {
        loadModuleStatsConfig();

        ConfigTag moduleTag = configTag.getTag("Module Grids");
        moduleTag.setComment("These settings allow you to override the base module grid sizes for DE's modular items.",
                "The format is:",
                "\tI:\"configTag\" <",
                "\t\twidth",
                "\t\theight",
                "\t>",
                "Leave blank to use the internal default value.",
                "This value is listed in each properties description but may not be valid if this config was generated by a previous version of DE.",
                "Please note reducing grid size will not remove modules from existing items but will instead leave modules in an invalid state where they are",
                "still fully functional but installed outside of the grid bounds.");

        moduleTag.getTag("removeInvalidModules")
                .setComment("(read category description)", "Setting this to true will cause invalid modules to be deleted from the module grid.")
                .setDefaultBoolean(false)
                .setSyncCallback((tag, type) -> removeInvalidModules = tag.getBoolean());

        moduleTag.getTag("wyvernTools")
                .setComment("Internal Default Value: " + WYVERN_TOOLS[0] + " x " + WYVERN_TOOLS[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> wyvernTools = getSize(tag, WYVERN_TOOLS));
        moduleTag.getTag("draconicTools")
                .setComment("Internal Default Value: " + DRACONIC_TOOLS[0] + " x " + DRACONIC_TOOLS[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> draconicTools = getSize(tag, DRACONIC_TOOLS));
        moduleTag.getTag("chaoticTools")
                .setComment("Internal Default Value: " + CHAOTIC_TOOLS[0] + " x " + CHAOTIC_TOOLS[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> chaoticTools = getSize(tag, CHAOTIC_TOOLS));

        moduleTag.getTag("draconicStaff")
                .setComment("Internal Default Value: " + DRACONIC_STAFF[0] + " x " + DRACONIC_STAFF[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> draconicStaff = getSize(tag, DRACONIC_STAFF));
        moduleTag.getTag("chaoticStaff")
                .setComment("Internal Default Value: " + CHAOTIC_STAFF[0] + " x " + CHAOTIC_STAFF[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> chaoticStaff = getSize(tag, CHAOTIC_STAFF));

        moduleTag.getTag("wyvernChestpiece")
                .setComment("Internal Default Value: " + WYVERN_CHESTPIECE[0] + " x " + WYVERN_CHESTPIECE[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> wyvernChestpiece = getSize(tag, WYVERN_CHESTPIECE));
        moduleTag.getTag("draconicChestpiece")
                .setComment("Internal Default Value: " + DRACONIC_CHESTPIECE[0] + " x " + DRACONIC_CHESTPIECE[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> draconicChestpiece = getSize(tag, DRACONIC_CHESTPIECE));
        moduleTag.getTag("chaoticChestpiece")
                .setComment("Internal Default Value: " + CHAOTIC_CHESTPIECE[0] + " x " + CHAOTIC_CHESTPIECE[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> chaoticChestpiece = getSize(tag, CHAOTIC_CHESTPIECE));

        moduleTag.getTag("wyvernCapacitor")
                .setComment("Internal Default Value: " + WYVERN_CAPACITOR[0] + " x " + WYVERN_CAPACITOR[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> wyvernCapacitor = getSize(tag, WYVERN_CAPACITOR));
        moduleTag.getTag("draconicCapacitor")
                .setComment("Internal Default Value: " + DRACONIC_CAPACITOR[0] + " x " + DRACONIC_CAPACITOR[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> draconicCapacitor = getSize(tag, DRACONIC_CAPACITOR));
        moduleTag.getTag("chaoticCapacitor")
                .setComment("Internal Default Value: " + CHAOTIC_CAPACITOR[0] + " x " + CHAOTIC_CAPACITOR[1])
                .setDefaultIntList(Collections.emptyList())
                .setSyncCallback((tag, type) -> chaoticCapacitor = getSize(tag, CHAOTIC_CAPACITOR));


        moduleTag.setSyncToClient();
    }

    private static int[] getSize(ConfigTag tag, Integer[] defaultValue) {
        List<Integer> tagValue = tag.getIntList();
        return DataUtils.toPrimitive(tagValue.size() == 2 ? tagValue.toArray(new Integer[0]) : defaultValue);
    }

    public static int toolWidth(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernTools[0];
            case DRACONIC:
                return draconicTools[0];
            case CHAOTIC:
                return chaoticTools[0];
        }
        return 1;
    }

    public static int toolHeight(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernTools[1];
            case DRACONIC:
                return draconicTools[1];
            case CHAOTIC:
                return chaoticTools[1];
        }
        return 1;
    }

    public static int staffWidth(TechLevel techLevel) {
        switch (techLevel) {
            case DRACONIC:
                return draconicStaff[0];
            case CHAOTIC:
                return chaoticStaff[0];
        }
        return 1;
    }

    public static int staffHeight(TechLevel techLevel) {
        switch (techLevel) {
            case DRACONIC:
                return draconicStaff[1];
            case CHAOTIC:
                return chaoticStaff[1];
        }
        return 1;
    }

    public static int chestpieceWidth(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernChestpiece[0];
            case DRACONIC:
                return draconicChestpiece[0];
            case CHAOTIC:
                return chaoticChestpiece[0];
        }
        return 1;
    }

    public static int chestpieceHeight(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernChestpiece[1];
            case DRACONIC:
                return draconicChestpiece[1];
            case CHAOTIC:
                return chaoticChestpiece[1];
        }
        return 1;
    }

    public static int capacitorWidth(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernCapacitor[0];
            case DRACONIC:
                return draconicCapacitor[0];
            case CHAOTIC:
                return chaoticCapacitor[0];
        }
        return 1;
    }

    public static int capacitorHeight(TechLevel techLevel) {
        switch (techLevel) {
            case WYVERN:
                return wyvernCapacitor[1];
            case DRACONIC:
                return draconicCapacitor[1];
            case CHAOTIC:
                return chaoticCapacitor[1];
        }
        return 1;
    }

    //Generated module stats

    private static void loadModuleStatsConfig() {
        moduleStats = new StandardConfigFile(Paths.get("./config/brandon3055/ModuleStats.cfg")).load();
        moduleStats.setSyncToClient();
        moduleStats.setSyncCallback((configTag, syncType) -> DEModules.moduleItemMap.keySet().forEach(BaseModule::reloadData));
//        moduleStats.setComment("All of the values in this file are the defaults as of the time the file was generated.",
//                "If you wish to ");

    }

    public static void saveStateConfig(){
        moduleStats.save();
    }

    public static ConfigTag getModuleTag(ResourceLocation moduleName) {
        ConfigTag tag = moduleStats.getTag(moduleName.toString());
        return tag;
    }

    public static boolean getOverride(ConfigTag tag) {
        if (tag.hasTag("override")) {
            return tag.getTag("override").getBoolean();
        }

        return tag.getTag("override")
                .setComment("Set this to true if you wish to override this module's default stats.")
                .setDefaultBoolean(false)
                .getBoolean();
    }

    public static long getModuleLong(Module<?> module, String tagName, long defaultValue) {
        ConfigTag tag = getModuleTag(Objects.requireNonNull(module.getRegistryName()));
        boolean override = getOverride(tag);
        ConfigTag longTag = tag.getTag(tagName).setDefaultLong(defaultValue);
        if (!override) {
            longTag.setLong(defaultValue);
        }
        return longTag.getLong();
    }

    public static int getModuleInt(Module<?> module, String tagName, int defaultValue) {
        ConfigTag tag = getModuleTag(Objects.requireNonNull(module.getRegistryName()));
        boolean override = getOverride(tag);
        ConfigTag valueTag = tag.getTag(tagName).setDefaultInt(defaultValue);
        if (!override) {
            valueTag.setInt(defaultValue);
        }
        return valueTag.getInt();
    }

    public static double getModuleDouble(Module<?> module, String tagName, double defaultValue) {
        ConfigTag tag = getModuleTag(Objects.requireNonNull(module.getRegistryName()));
        boolean override = getOverride(tag);
        ConfigTag valueTag = tag.getTag(tagName).setDefaultDouble(defaultValue);
        if (!override) {
            valueTag.setDouble(defaultValue);
        }
        return valueTag.getDouble();
    }
}
